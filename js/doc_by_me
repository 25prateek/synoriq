Placing scripts at the bottom of the <body> element improves the display speed,
because script interpretation slows down the display.

 <!DOCTYPE html>
<html>
<body>

<h1>A Web Page</h1>
<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

</body>
</html> 



####

External scripts cannot contain <script> tags.

External JavaScript Advantages

Placing scripts in external files has some advantages:

    It separates HTML and code
    It makes HTML and JavaScript easier to read and maintain
    Cached JavaScript files can speed up page loads



document.write("when 5 is divided by 3 is ",5/6)
document.write("when 5 is divided by 3 is ",(5/6).tofixed(2)) //


######################################

Falsy values

The following values evaluate to false (also known as Falsy values):

    false
    undefined
    null
    0
    NaN
    the empty string ("")



Nested functions and closures

You may nest a function within another function. The nested (inner) function is private to its containing (outer) function.
It also forms a closure. A closure is an expression (most commonly, a function) that can have free variables together with an environment that binds those variables (that "closes" the expression).
Since a nested function is a closure, this means that a nested function can "inherit" the arguments and variables of its containing function. In other words, the inner function contains the scope of the outer function.
To summarize:

    The inner function can be accessed only from statements in the outer function.
    The inner function forms a closure: the inner function can use the arguments and variables of the outer function, while the outer function cannot use the arguments and variables of the inner function.



Multiply-nested functions

Functions can be multiply-nested.  For example:

    A function (A) contains a function (B), which itself contains a function (C).
    Both functions B and C form closures here. So, B can access A, and C can access B.
    In addition, since C can access B which can access A, C can also access A.

Thus, the closures can contain multiple scopes; they recursively contain the scope of the functions containing it. This is called scope chaining. (The reason it is called "chaining" is explained later.)